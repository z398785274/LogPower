// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: power.loginfo.proto

#ifndef PROTOBUF_power_2eloginfo_2eproto__INCLUDED
#define PROTOBUF_power_2eloginfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace power {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_power_2eloginfo_2eproto();
void protobuf_AssignDesc_power_2eloginfo_2eproto();
void protobuf_ShutdownFile_power_2eloginfo_2eproto();

class loginfo;

// ===================================================================

class loginfo : public ::google::protobuf::Message {
 public:
  loginfo();
  virtual ~loginfo();

  loginfo(const loginfo& from);

  inline loginfo& operator=(const loginfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const loginfo& default_instance();

  void Swap(loginfo* other);

  // implements Message ----------------------------------------------

  loginfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const loginfo& from);
  void MergeFrom(const loginfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string log_name = 1;
  inline bool has_log_name() const;
  inline void clear_log_name();
  static const int kLogNameFieldNumber = 1;
  inline const ::std::string& log_name() const;
  inline void set_log_name(const ::std::string& value);
  inline void set_log_name(const char* value);
  inline void set_log_name(const char* value, size_t size);
  inline ::std::string* mutable_log_name();
  inline ::std::string* release_log_name();
  inline void set_allocated_log_name(::std::string* log_name);

  // required bytes log_content = 2;
  inline bool has_log_content() const;
  inline void clear_log_content();
  static const int kLogContentFieldNumber = 2;
  inline const ::std::string& log_content() const;
  inline void set_log_content(const ::std::string& value);
  inline void set_log_content(const char* value);
  inline void set_log_content(const void* value, size_t size);
  inline ::std::string* mutable_log_content();
  inline ::std::string* release_log_content();
  inline void set_allocated_log_content(::std::string* log_content);

  // required int32 log_len = 3;
  inline bool has_log_len() const;
  inline void clear_log_len();
  static const int kLogLenFieldNumber = 3;
  inline ::google::protobuf::int32 log_len() const;
  inline void set_log_len(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:power.loginfo)
 private:
  inline void set_has_log_name();
  inline void clear_has_log_name();
  inline void set_has_log_content();
  inline void clear_has_log_content();
  inline void set_has_log_len();
  inline void clear_has_log_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* log_name_;
  ::std::string* log_content_;
  ::google::protobuf::int32 log_len_;
  friend void  protobuf_AddDesc_power_2eloginfo_2eproto();
  friend void protobuf_AssignDesc_power_2eloginfo_2eproto();
  friend void protobuf_ShutdownFile_power_2eloginfo_2eproto();

  void InitAsDefaultInstance();
  static loginfo* default_instance_;
};
// ===================================================================


// ===================================================================

// loginfo

// required string log_name = 1;
inline bool loginfo::has_log_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void loginfo::set_has_log_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void loginfo::clear_has_log_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void loginfo::clear_log_name() {
  if (log_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_name_->clear();
  }
  clear_has_log_name();
}
inline const ::std::string& loginfo::log_name() const {
  // @@protoc_insertion_point(field_get:power.loginfo.log_name)
  return *log_name_;
}
inline void loginfo::set_log_name(const ::std::string& value) {
  set_has_log_name();
  if (log_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_name_ = new ::std::string;
  }
  log_name_->assign(value);
  // @@protoc_insertion_point(field_set:power.loginfo.log_name)
}
inline void loginfo::set_log_name(const char* value) {
  set_has_log_name();
  if (log_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_name_ = new ::std::string;
  }
  log_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:power.loginfo.log_name)
}
inline void loginfo::set_log_name(const char* value, size_t size) {
  set_has_log_name();
  if (log_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_name_ = new ::std::string;
  }
  log_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:power.loginfo.log_name)
}
inline ::std::string* loginfo::mutable_log_name() {
  set_has_log_name();
  if (log_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:power.loginfo.log_name)
  return log_name_;
}
inline ::std::string* loginfo::release_log_name() {
  clear_has_log_name();
  if (log_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = log_name_;
    log_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void loginfo::set_allocated_log_name(::std::string* log_name) {
  if (log_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_name_;
  }
  if (log_name) {
    set_has_log_name();
    log_name_ = log_name;
  } else {
    clear_has_log_name();
    log_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:power.loginfo.log_name)
}

// required bytes log_content = 2;
inline bool loginfo::has_log_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void loginfo::set_has_log_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void loginfo::clear_has_log_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void loginfo::clear_log_content() {
  if (log_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_content_->clear();
  }
  clear_has_log_content();
}
inline const ::std::string& loginfo::log_content() const {
  // @@protoc_insertion_point(field_get:power.loginfo.log_content)
  return *log_content_;
}
inline void loginfo::set_log_content(const ::std::string& value) {
  set_has_log_content();
  if (log_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_content_ = new ::std::string;
  }
  log_content_->assign(value);
  // @@protoc_insertion_point(field_set:power.loginfo.log_content)
}
inline void loginfo::set_log_content(const char* value) {
  set_has_log_content();
  if (log_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_content_ = new ::std::string;
  }
  log_content_->assign(value);
  // @@protoc_insertion_point(field_set_char:power.loginfo.log_content)
}
inline void loginfo::set_log_content(const void* value, size_t size) {
  set_has_log_content();
  if (log_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_content_ = new ::std::string;
  }
  log_content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:power.loginfo.log_content)
}
inline ::std::string* loginfo::mutable_log_content() {
  set_has_log_content();
  if (log_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:power.loginfo.log_content)
  return log_content_;
}
inline ::std::string* loginfo::release_log_content() {
  clear_has_log_content();
  if (log_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = log_content_;
    log_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void loginfo::set_allocated_log_content(::std::string* log_content) {
  if (log_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_content_;
  }
  if (log_content) {
    set_has_log_content();
    log_content_ = log_content;
  } else {
    clear_has_log_content();
    log_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:power.loginfo.log_content)
}

// required int32 log_len = 3;
inline bool loginfo::has_log_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void loginfo::set_has_log_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void loginfo::clear_has_log_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void loginfo::clear_log_len() {
  log_len_ = 0;
  clear_has_log_len();
}
inline ::google::protobuf::int32 loginfo::log_len() const {
  // @@protoc_insertion_point(field_get:power.loginfo.log_len)
  return log_len_;
}
inline void loginfo::set_log_len(::google::protobuf::int32 value) {
  set_has_log_len();
  log_len_ = value;
  // @@protoc_insertion_point(field_set:power.loginfo.log_len)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace power

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_power_2eloginfo_2eproto__INCLUDED
